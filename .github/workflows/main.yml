name: Build Release

env:
  PROJECT_OWNER: ${{ github.repository_owner }}
  PROJECT_NAME: webapp
  KUBE_INSTANCE: kube2
  KUBE_NAMESPACE: ${{ github.repository_owner }}
  IMAGE_TAG: latest
  DEPLOY_ENV: staging
  EXTERNAL_NAME: webapp.serit.no
  target: release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v2
    - name: Restore NuGet
      uses: actions/cache@v1
      with:
        path: ~/.nuget
        key: ${{ runner.os }}-cache-nuget-${{ hashFiles('*/*/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-cache-nuget-
    - name: Restore npm
      uses: actions/cache@v1
      with:
        path: ./node_modules
        key: ${{ runner.os }}-cache-npm-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-npm-
    - name: Install dependencies
      run: |
        dotnet tool restore
        yarn install
    - name: Build
      run: |
        fake build -t ${{ env.target }}
    - name: Upload deploy bundle
      uses: actions/upload-artifact@v2
      with:
        name: deploy
        path: deploy
    - name: Cleanup
      run: |
        rm -rf deploy

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Download deploy bundle
      uses: actions/download-artifact@v2
      with:
        name: deploy
        path: deploy
    - name: Release
      uses: docker/build-push-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}/${{ env.PROJECT_NAME }}-${{ env.target }}
        registry: docker.pkg.github.com
        tags: latest
        tag_with_sha: false

  tests:
    runs-on: self-hosted
    needs: build
    steps:
    - uses: actions/checkout@v2
    - name: Download deploy bundle
      uses: actions/download-artifact@v2
      with:
        name: deploy
        path: deploy
    - name: Restore NuGet
      uses: actions/cache@v1
      with:
        path: ~/.nuget
        key: ${{ runner.os }}-cache-nuget-${{ hashFiles('**/packages.json.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-nuget-
    - name: Restore npm
      uses: actions/cache@v1
      with:
        path: ./node_modules
        key: ${{ runner.os }}-cache-npm-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-npm-
    - name: Install dependencies
      run: |
        dotnet tool restore
        yarn install
    - name: Run unit tests
      run: dotnet run -p Tests
    - name: Run UI tests
      run: dotnet run -p Tests -- --canopy headless
    - name: Cleanup
      run: |
        rm -rf deploy \\canopy\\

## deploy to a local Kubernetes cluster
  deploy-staging:
    container: dtzar/helm-kubectl:latest
    runs-on: self-hosted
    needs: release
    steps:
    - uses: actions/checkout@v2
    - name: Deploy
      run: |
        DEPLOY_NAME=$PROJECT_NAME-$DEPLOY_ENV
        SERVICE_NAME=$DEPLOY_NAME.$PROJECT_OWNER.$KUBE_INSTANCE.local
        env

        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
        kubectl config use-context $KUBE_INSTANCE
        kubectl get pods -n $KUBE_NAMESPACE

        helm list -n $KUBE_NAMESPACE
        cmd=upgrade && helm list -q -n $KUBE_NAMESPACE | grep -q "$DEPLOY_NAME" || cmd=install
        [ ! -z $EXTERNAL_NAME ] && EXTERNAL_INGRESS="--set ingress.hosts[1].host=$EXTERNAL_NAME --set ingress.hosts[1].paths[0]=/"

        echo "helm $cmd $DEPLOY_NAME"
        helm $cmd -f ./charts/values.yaml \
            --namespace $KUBE_NAMESPACE \
            --set image.tag=$IMAGE_TAG \
            --set environment=$DEPLOY_ENV \
            --set ingress.hosts[0].host=$SERVICE_NAME \
            --set ingress.tls[0].hosts[0]=$SERVICE_NAME \
            $EXTERNAL_INGRESS \
            $DEPLOY_NAME ./charts
    - name: Cleanup
      run: |
        chown -R 1000:1000 .

## deploy to a local container on a runner labeled with "local"
## ref. https://github.com/juselius/kubernetes-actions-runner
#   deploy-local-docker:
#     runs-on: [ self-hosted, local ]
#     needs: release
#     steps:
#     - name: Deploy local:webapp
#       run: |
#         docker run --rm -p 8085:8085 -d \
#         -e CONTENT_ROOT=/app/public \
#         docker.pkg.github.com/${{ github.repository }}/${{ env.PROJECT_NAME }}-${{ env.target }}
