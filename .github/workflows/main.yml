name: Build

env:
  PROJECT_OWNER: juselius
  PROJECT_NAME: inf-3910-webapp
  KUBE_INSTANCE: kube2
  KUBE_NAMESPACE: juselius
  IMAGE_TAG: latest
  DEPLOY_ENV: staging
  EXTERNAL_NAME: webapp.serit.no

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  create-sdk:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: cache
      uses: actions/cache@v1
      with:
        path: .devcontainer
        key: ${{ runner.os }}-cache-sdk-${{ hashFiles('.devcontainer/Dockerfile') }}
    - name: Create SDK
      if: steps.cache.outputs.cache-hit != 'true'
      uses: docker/build-push-action@v1
      with:
          username: juselius
          password: ${{ secrets.DOCKER_HUB }}
          repository: juselius/inf-3910-webapp-sdk
          path: .devcontainer
          tags: latest
    # - name: Cleanup
    #   run: |
    #     chown -R 1000:1000 .

  build-release:
    container: juselius/inf-3910-webapp-sdk:latest
    env:
      target: release
    runs-on: self-hosted
    needs: create-sdk
    steps:
    - uses: actions/checkout@v2
    - name: Restore NuGet
      uses: actions/cache@v1
      with:
        path: ~/.nuget
        key: ${{ runner.os }}-cache-nuget-${{ hashFiles('**/paket.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-nuget-
    - name: Restore npm
      uses: actions/cache@v1
      with:
        path: ./node_modules
        key: ${{ runner.os }}-cache-npm-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-npm-
    - name: Install dependencies
      run: |
        dotnet tool restore
        yarn install
        paket install
    - name: Build
      run: |
        fake build -t ${{ env.target }}
    - name: Upload deploy bundle
      uses: actions/upload-artifact@v2
      with:
        name: deploy
        path: deploy
    - name: Cleanup
      run: |
        chown -R 1000:1000 .
        rm -rf deploy

  release:
    env:
      target: release
    runs-on: ubuntu-latest
    needs: build-release
    steps:
    - uses: actions/checkout@v2
    - name: Download deploy bundle
      uses: actions/download-artifact@v2
      with:
        name: deploy
        path: deploy
    - name: Release
      uses: docker/build-push-action@v1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}/${{ env.target }}
        registry: docker.pkg.github.com
        tags: latest
        tag_with_sha: true
    # - name: Cleanup
    #   run: |
    #     chown -R 1000:1000 .
    #     rm -rf deploy

  tests:
    container: juselius/inf-3910-webapp-sdk:latest
    runs-on: self-hosted
    needs: build-release
    steps:
    - uses: actions/checkout@v2
    # - name: Download deploy bundle
    #   uses: actions/download-artifact@v2
    #   with:
    #     name: deploy
    #     path: deploy
    - name: Restore NuGet
      uses: actions/cache@v1
      with:
        path: ~/.nuget
        key: ${{ runner.os }}-cache-nuget-${{ hashFiles('**/paket.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-nuget-
    - name: Restore npm
      uses: actions/cache@v1
      with:
        path: ./node_modules
        key: ${{ runner.os }}-cache-npm-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-cache-npm-
    - name: Install dependencies
      run: |
        dotnet tool restore
        yarn install
        paket install
    - name: Run unit tests
      run: dotnet run -p Tests
    - name: Run UI tests
      run: dotnet run -p Tests -- --canopy headless
    - name: Cleanup
      run: |
        chown -R 1000:1000 .
        rm -rf deploy \\canopy\\

#   deploy-staging:
#     container: dtzar/helm-kubectl:latest
#     runs-on: self-hosted
#     needs: release
#     steps:
#     - uses: actions/checkout@v2
#     - name: Deploy
#       run: |
#         DEPLOY_NAME=$PROJECT_NAME-$DEPLOY_ENV
#         SERVICE_NAME=$DEPLOY_NAME.$PROJECT_OWNER.$KUBE_INSTANCE.local
#         env

#         mkdir -p $HOME/.kube
#         echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
#         kubectl config use-context $KUBE_INSTANCE
#         kubectl get pods -n $KUBE_NAMESPACE

#         helm list -n $KUBE_NAMESPACE
#         cmd=upgrade && helm list -q -n $KUBE_NAMESPACE | grep -q "$DEPLOY_NAME" || cmd=install
#         [ ! -z $EXTERNAL_NAME ] && EXTERNAL_INGRESS="--set ingress.hosts[1].host=$EXTERNAL_NAME --set ingress.hosts[1].paths[0]=/"

#         echo "helm $cmd $DEPLOY_NAME"
#         helm $cmd -f ./charts/values.yaml \
#             --namespace $KUBE_NAMESPACE \
#             --set image.tag=$IMAGE_TAG \
#             --set environment=$DEPLOY_ENV \
#             --set ingress.hosts[0].host=$SERVICE_NAME \
#             --set ingress.tls[0].hosts[0]=$SERVICE_NAME \
#             $EXTERNAL_INGRESS \
#             $DEPLOY_NAME ./charts
#     - name: Cleanup
#       run: |
#         chown -R 1000:1000 .

#   deploy-local-docker:
#     runs-on: [ self-hosted, local ]
#     needs: release
#     steps:
#     - name: Deploy local:webapp
#       run: |
#         docker run --rm -p 8085:8085 -d \
#         -e CONTENT_ROOT=/app/public \
#         docker.pkg.github.com/juselius/inf-3910-webapp/release:latest